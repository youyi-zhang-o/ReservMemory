// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: UsrHeader.proto
// Protobuf C++ Version: 5.29.3

#ifndef UsrHeader_2eproto_2epb_2eh
#define UsrHeader_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_UsrHeader_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_UsrHeader_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_UsrHeader_2eproto;
class UsrHeader;
struct UsrHeaderDefaultTypeInternal;
extern UsrHeaderDefaultTypeInternal _UsrHeader_default_instance_;
class UsrHeaders;
struct UsrHeadersDefaultTypeInternal;
extern UsrHeadersDefaultTypeInternal _UsrHeaders_default_instance_;
class UsrHeaders_UsrHeadersEntry_DoNotUse;
struct UsrHeaders_UsrHeadersEntry_DoNotUseDefaultTypeInternal;
extern UsrHeaders_UsrHeadersEntry_DoNotUseDefaultTypeInternal _UsrHeaders_UsrHeadersEntry_DoNotUse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum UsrType : int {
  USR_TYPE_UNSPECIFIE = 0,
  USR_TYPE_PROTO = 1,
  USR_TYPE_RAW_BUFFER = 2,
  UsrType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UsrType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UsrType_IsValid(int value);
extern const uint32_t UsrType_internal_data_[];
constexpr UsrType UsrType_MIN = static_cast<UsrType>(0);
constexpr UsrType UsrType_MAX = static_cast<UsrType>(2);
constexpr int UsrType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
UsrType_descriptor();
template <typename T>
const std::string& UsrType_Name(T value) {
  static_assert(std::is_same<T, UsrType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UsrType_Name().");
  return UsrType_Name(static_cast<UsrType>(value));
}
template <>
inline const std::string& UsrType_Name(UsrType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UsrType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UsrType_Parse(absl::string_view name, UsrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UsrType>(
      UsrType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UsrHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UsrHeader) */ {
 public:
  inline UsrHeader() : UsrHeader(nullptr) {}
  ~UsrHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UsrHeader* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UsrHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UsrHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline UsrHeader(const UsrHeader& from) : UsrHeader(nullptr, from) {}
  inline UsrHeader(UsrHeader&& from) noexcept
      : UsrHeader(nullptr, std::move(from)) {}
  inline UsrHeader& operator=(const UsrHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsrHeader& operator=(UsrHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsrHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsrHeader* internal_default_instance() {
    return reinterpret_cast<const UsrHeader*>(
        &_UsrHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UsrHeader& a, UsrHeader& b) { a.Swap(&b); }
  inline void Swap(UsrHeader* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsrHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsrHeader* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UsrHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UsrHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UsrHeader& from) { UsrHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UsrHeader* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UsrHeader"; }

 protected:
  explicit UsrHeader(::google::protobuf::Arena* arena);
  UsrHeader(::google::protobuf::Arena* arena, const UsrHeader& from);
  UsrHeader(::google::protobuf::Arena* arena, UsrHeader&& from) noexcept
      : UsrHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOffsetFieldNumber = 1,
    kSizeFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kUsrTypeFieldNumber = 4,
  };
  // uint64 offset = 1;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // uint64 size = 2;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // uint64 capacity = 3;
  void clear_capacity() ;
  ::uint64_t capacity() const;
  void set_capacity(::uint64_t value);

  private:
  ::uint64_t _internal_capacity() const;
  void _internal_set_capacity(::uint64_t value);

  public:
  // .UsrType usr_type = 4;
  void clear_usr_type() ;
  ::UsrType usr_type() const;
  void set_usr_type(::UsrType value);

  private:
  ::UsrType _internal_usr_type() const;
  void _internal_set_usr_type(::UsrType value);

  public:
  // @@protoc_insertion_point(class_scope:UsrHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UsrHeader& from_msg);
    ::uint64_t offset_;
    ::uint64_t size_;
    ::uint64_t capacity_;
    int usr_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UsrHeader_2eproto;
};
// -------------------------------------------------------------------

class UsrHeaders_UsrHeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::uint32_t, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::uint32_t, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  UsrHeaders_UsrHeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UsrHeaders_UsrHeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UsrHeaders_UsrHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UsrHeaders_UsrHeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UsrHeaders_UsrHeadersEntry_DoNotUse*>(
        &_UsrHeaders_UsrHeadersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_UsrHeader_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UsrHeaders final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UsrHeaders) */ {
 public:
  inline UsrHeaders() : UsrHeaders(nullptr) {}
  ~UsrHeaders() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UsrHeaders* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UsrHeaders));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UsrHeaders(
      ::google::protobuf::internal::ConstantInitialized);

  inline UsrHeaders(const UsrHeaders& from) : UsrHeaders(nullptr, from) {}
  inline UsrHeaders(UsrHeaders&& from) noexcept
      : UsrHeaders(nullptr, std::move(from)) {}
  inline UsrHeaders& operator=(const UsrHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsrHeaders& operator=(UsrHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsrHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsrHeaders* internal_default_instance() {
    return reinterpret_cast<const UsrHeaders*>(
        &_UsrHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UsrHeaders& a, UsrHeaders& b) { a.Swap(&b); }
  inline void Swap(UsrHeaders* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsrHeaders* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsrHeaders* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UsrHeaders>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UsrHeaders& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UsrHeaders& from) { UsrHeaders::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UsrHeaders* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "UsrHeaders"; }

 protected:
  explicit UsrHeaders(::google::protobuf::Arena* arena);
  UsrHeaders(::google::protobuf::Arena* arena, const UsrHeaders& from);
  UsrHeaders(::google::protobuf::Arena* arena, UsrHeaders&& from) noexcept
      : UsrHeaders(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsrHeadersFieldNumber = 1,
  };
  // map<uint32, .UsrHeader> usr_headers = 1;
  int usr_headers_size() const;
  private:
  int _internal_usr_headers_size() const;

  public:
  void clear_usr_headers() ;
  const ::google::protobuf::Map<::uint32_t, ::UsrHeader>& usr_headers() const;
  ::google::protobuf::Map<::uint32_t, ::UsrHeader>* mutable_usr_headers();

  private:
  const ::google::protobuf::Map<::uint32_t, ::UsrHeader>& _internal_usr_headers() const;
  ::google::protobuf::Map<::uint32_t, ::UsrHeader>* _internal_mutable_usr_headers();

  public:
  // @@protoc_insertion_point(class_scope:UsrHeaders)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UsrHeaders& from_msg);
    ::google::protobuf::internal::MapField<UsrHeaders_UsrHeadersEntry_DoNotUse, ::uint32_t, ::UsrHeader,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        usr_headers_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UsrHeader_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UsrHeader

// uint64 offset = 1;
inline void UsrHeader::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t UsrHeader::offset() const {
  // @@protoc_insertion_point(field_get:UsrHeader.offset)
  return _internal_offset();
}
inline void UsrHeader::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:UsrHeader.offset)
}
inline ::uint64_t UsrHeader::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void UsrHeader::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// uint64 size = 2;
inline void UsrHeader::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t UsrHeader::size() const {
  // @@protoc_insertion_point(field_get:UsrHeader.size)
  return _internal_size();
}
inline void UsrHeader::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:UsrHeader.size)
}
inline ::uint64_t UsrHeader::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void UsrHeader::_internal_set_size(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// uint64 capacity = 3;
inline void UsrHeader::clear_capacity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capacity_ = ::uint64_t{0u};
}
inline ::uint64_t UsrHeader::capacity() const {
  // @@protoc_insertion_point(field_get:UsrHeader.capacity)
  return _internal_capacity();
}
inline void UsrHeader::set_capacity(::uint64_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:UsrHeader.capacity)
}
inline ::uint64_t UsrHeader::_internal_capacity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.capacity_;
}
inline void UsrHeader::_internal_set_capacity(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capacity_ = value;
}

// .UsrType usr_type = 4;
inline void UsrHeader::clear_usr_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usr_type_ = 0;
}
inline ::UsrType UsrHeader::usr_type() const {
  // @@protoc_insertion_point(field_get:UsrHeader.usr_type)
  return _internal_usr_type();
}
inline void UsrHeader::set_usr_type(::UsrType value) {
  _internal_set_usr_type(value);
  // @@protoc_insertion_point(field_set:UsrHeader.usr_type)
}
inline ::UsrType UsrHeader::_internal_usr_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::UsrType>(_impl_.usr_type_);
}
inline void UsrHeader::_internal_set_usr_type(::UsrType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usr_type_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UsrHeaders

// map<uint32, .UsrHeader> usr_headers = 1;
inline int UsrHeaders::_internal_usr_headers_size() const {
  return _internal_usr_headers().size();
}
inline int UsrHeaders::usr_headers_size() const {
  return _internal_usr_headers_size();
}
inline void UsrHeaders::clear_usr_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usr_headers_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, ::UsrHeader>& UsrHeaders::_internal_usr_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usr_headers_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, ::UsrHeader>& UsrHeaders::usr_headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:UsrHeaders.usr_headers)
  return _internal_usr_headers();
}
inline ::google::protobuf::Map<::uint32_t, ::UsrHeader>* UsrHeaders::_internal_mutable_usr_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.usr_headers_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, ::UsrHeader>* UsrHeaders::mutable_usr_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:UsrHeaders.usr_headers)
  return _internal_mutable_usr_headers();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::UsrType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::UsrType>() {
  return ::UsrType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // UsrHeader_2eproto_2epb_2eh
